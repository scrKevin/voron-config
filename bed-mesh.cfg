[bed_mesh]
speed: 500
horizontal_move_z: 3
##--------------------------------------------------------------------
##	Uncomment below for 250mm build
#mesh_min: 40, 40
#mesh_max: 210,210

##	Uncomment for 300mm build
mesh_min: 40, 40
mesh_max: 260,260

##	Uncomment for 350mm build
#mesh_min: 40, 40
#mesh_max: 310,310
##--------------------------------------------------------------------
fade_start: 0.9
fade_end: 10.0
probe_count: 9,9 # Values should be odd, so one point is directly at bed center
algorithm: bicubic
# relative_reference_index: 4 # Update when changing probe_count, to ((x points * y points) - 1) / 2. (the center point)
zero_reference_position: 150, 150

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
; variable_parameter_AREA_START : 0,0
; variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 1.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 5
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
; the steps in mm for each mesh point
variable_x_step: 50
variable_y_step: 80
gcode:
    RESPOND TYPE=error MSG='AREA_START in BED_MESH_CALIBRATE: {params.AREA_START}'
    RESPOND TYPE=error MSG='AREA_END in BED_MESH_CALIBRATE: {params.AREA_END}'
    RESPOND TYPE=error MSG='area_min_x: {params.AREA_START.split(",")[0]|float}'
    RESPOND TYPE=error MSG='area_min_y: {params.AREA_START.split(",")[1]|float}'
    RESPOND TYPE=error MSG='area_max_x: {params.AREA_END.split(",")[0]|float}'
    RESPOND TYPE=error MSG='area_max_y: {params.AREA_END.split(",")[1]|float}'
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
    	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
    	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
    	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

  	    {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
    {% endif %}

	{% set meshMaxPointX = 11 %}
	{% set meshMaxPointY = 11 %}

        RESPOND TYPE=error MSG='area_min_x={area_min_x},area_max_x={area_max_x},area_min_y={area_min_y},area_max_y={area_max_y}'
        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            # {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% set meshPointX = ((area_max_x - area_min_x) / x_step)|int %}
            RESPOND TYPE=error MSG='meshPointX = {meshPointX}'
            {% if meshPointX % 2 == 0 %}
              {% set meshPointX = meshPointX + 1 %}
            {% endif %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	        {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            # {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% set meshPointY = ((area_max_y - area_min_y) / y_step)|int %}
            RESPOND TYPE=error MSG='meshPointY = {meshPointY}'
            {% if meshPointY % 2 == 0 %}
              {% set meshPointY = meshPointY + 1 %}
            {% endif %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	        {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
  	        {% if "algorithm" in bedMeshConfig %}
	            {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                # RESPOND TYPE=error MSG='REVERTING TO DEFAULT 1 BED_BESH_CALIBRATE'
                RESPOND TYPE=error MSG='meshPointX = {meshPointX}, meshPointY = {meshPointY}'
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                # RESPOND TYPE=error MSG='REVERTING TO DEFAULT 2 BED_BESH_CALIBRATE'
                RESPOND TYPE=error MSG='meshPointX = {meshPointX}, meshPointY = {meshPointY}'
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            RESPOND TYPE=error MSG='REVERTING TO DEFAULT 3 BED_BESH_CALIBRATE'
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG='REVERTING TO DEFAULT 4 BED_BESH_CALIBRATE'
        BED_MESH_CALIBRATE_BASE
    {% endif %}
